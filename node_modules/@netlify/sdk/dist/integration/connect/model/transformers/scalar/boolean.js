import { ModelError } from "../../error.js";
import { omitByUndefined } from "../../../utils/omit-by-undefined.js";
import { ScalarBaseTransformer } from "../scalar.js";
export class BooleanTransformer extends ScalarBaseTransformer {
    toCreateSingleFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: "boolean",
        });
    }
    toCreateListFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: "list",
            items: {
                type: "boolean",
            },
        });
    }
    parseVisitedInputSingle(input, field, treeContext) {
        const isBoolean = typeof input === `boolean`;
        if (!input && !field.required && !isBoolean) {
            return null;
        }
        if (!isBoolean) {
            throw new ModelError(`Input data for field ${field.fieldName} at input path ${treeContext.path.join(`.`)}.${field.fieldName} is not a boolean but should be. Received ${typeof input}.\n\n${JSON.stringify(input, null, 2)}`);
        }
        return input;
    }
    toCreateSingleFieldValue(input) {
        return {
            type: "boolean",
            value: input,
        };
    }
    toCreateListFieldValue(input) {
        return {
            type: `list`,
            items: input?.map?.((listFieldValue) => {
                return {
                    type: "boolean",
                    value: listFieldValue,
                };
            }),
        };
    }
}
//# sourceMappingURL=boolean.js.map