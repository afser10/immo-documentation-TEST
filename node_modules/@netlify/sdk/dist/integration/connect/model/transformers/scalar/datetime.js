import { omitByUndefined } from "../../../utils/omit-by-undefined.js";
import { ModelError } from "../../error.js";
import { ScalarBaseTransformer } from "../scalar.js";
export class DateTimeTransformer extends ScalarBaseTransformer {
    parseVisitedInputSingle(input) {
        if (typeof input === `string`)
            return input;
        if (input instanceof Date) {
            return input.toISOString();
        }
        throw new ModelError(`Only strings or Date objects may be passed as input values for DateTime fields. Found ${typeof input}`);
    }
    toCreateSingleFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: "datetime",
        });
    }
    toCreateListFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: "list",
            items: {
                type: "datetime",
            },
        });
    }
    toCreateSingleFieldValue(input) {
        const value = this.parseVisitedInputSingle(input);
        return {
            type: "datetime",
            value,
        };
    }
    toCreateListFieldValue(input) {
        return {
            type: `list`,
            items: input?.map?.((listFieldValue) => {
                return {
                    type: "datetime",
                    value: listFieldValue,
                };
            }),
        };
    }
}
//# sourceMappingURL=datetime.js.map