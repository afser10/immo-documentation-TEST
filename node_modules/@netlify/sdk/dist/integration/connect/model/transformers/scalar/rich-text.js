import { omitByUndefined } from "../../../utils/omit-by-undefined.js";
import { ScalarBaseTransformer } from "../scalar.js";
export class RichTextTransformer extends ScalarBaseTransformer {
    toConnectSingleFieldDefinition(modelField) {
        // ex -> title: JSON! @proxy(from: "title.value") # for a non null field in Create
        // or -> title: JSON # a nullable field in Connect
        return this.modelFieldToGraphQLFieldSDL(modelField, {
            proxyFrom: `value`,
            asTypeName: `JSON`,
        });
    }
    toConnectListFieldDefinition(modelField) {
        // ex -> titles: [JSON]! @proxy(from: "title.items.value") # for a non null field in Create
        // or -> titles: [JSON] # a nullable field in Connect
        return this.modelFieldToGraphQLFieldSDL(modelField, {
            proxyFrom: `items.value`,
            asTypeName: `JSON`,
        });
    }
    toCreateSingleFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: "richText",
        });
    }
    toCreateListFieldDefinition(modelField) {
        return omitByUndefined({
            ...this.modelFieldToSharedCreateProperties(modelField),
            type: "list",
            items: {
                type: "richText",
            },
        });
    }
    parseVisitedInputSingle(input) {
        return input;
    }
    toCreateSingleFieldValue(input) {
        return {
            type: "richText",
            value: input,
        };
    }
    toCreateListFieldValue(input) {
        return {
            type: `list`,
            items: input?.map?.((listFieldValue) => {
                return {
                    type: "richText",
                    value: listFieldValue,
                };
            }),
        };
    }
}
//# sourceMappingURL=rich-text.js.map