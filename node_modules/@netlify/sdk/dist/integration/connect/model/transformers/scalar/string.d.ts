import { ModelTransformerImplementation, ModelTreeContext, ResolvedModelField } from "../../transformer.js";
import { CoersionField } from "../../walker.js";
import { ScalarBaseTransformer } from "../scalar.js";
import { Editor } from "../../types.js";
export declare class StringTransformer extends ScalarBaseTransformer implements ModelTransformerImplementation {
    toCreateSingleFieldDefinition(modelField: ResolvedModelField): null | Editor.Field;
    toCreateListFieldDefinition(modelField: ResolvedModelField): Editor.FieldList;
    parseVisitedInputSingle(input: unknown, field: CoersionField, treeContext: ModelTreeContext): string | null;
    toCreateSingleFieldValue(input: string): Editor.DocumentStringLikeFieldNonLocalizedForType<any>;
    toCreateSingleFieldValueLocalized(input: Record<string, string>, _field: CoersionField, treeContext: ModelTreeContext): Editor.DocumentStringLikeFieldLocalizedForType<any>;
    toCreateListFieldValue(input: string[]): {
        type: string;
        items: {
            type: string;
            value: string;
        }[];
    };
}
//# sourceMappingURL=string.d.ts.map