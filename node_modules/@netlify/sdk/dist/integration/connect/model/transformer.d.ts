import type * as CSITypes from "@stackbit/types";
import { type ModelBuilder } from "./builder.js";
import { ModelField, type ModelDefinition } from "./definition.js";
import { CoersionField, VisitorState } from "./walker.js";
import { Editor } from "./types.js";
export type ModelContext = {
    pathName: string;
    path: string[];
    isNonNull: boolean;
};
export type ModelFieldContext = {
    fieldName: string;
    path: string[];
    isNonNull: boolean;
};
export type ModelTreeContext = {
    path: string[];
    visitorState: VisitorState;
};
export type ResolvedModelField = Omit<ModelField, "type"> & {
    type: ModelDefinition;
};
export type RuntimePlatform = `netlify-create` | `netlify-connect`;
export interface ModelTransformerImplementation {
    toConnectDefinition(context: ModelContext): string | null;
    toConnectFieldDefinition(modelField: ResolvedModelField): string | null;
    toConnectSingleFieldDefinition(modelField: ResolvedModelField): string | null;
    toConnectListFieldDefinition(modelField: ResolvedModelField): string | null;
    toCreateDefinition(): unknown;
    toCreateSingleFieldDefinition(context: ResolvedModelField): unknown;
    toCreateListFieldDefinition(context: ResolvedModelField): unknown;
    toCreateSingleFieldValue(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toCreateSingleFieldValueLocalized(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toCreateListFieldValue(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toCreateListFieldValueLocalized(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toConnectSingleFieldValue(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toConnectSingleFieldValueLocalized(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toConnectListFieldValue(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toConnectListFieldValueLocalized(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    parseVisitedInputSingle(visited: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    parseVisitedInputList(visited: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
}
export declare class ModelTransformer implements ModelTransformerImplementation {
    protected builder: ModelBuilder;
    protected definition: ModelDefinition;
    constructor(init: {
        builder: ModelBuilder;
        definition: ModelDefinition;
    });
    protected get runtimePlatform(): RuntimePlatform;
    inputNeedsDefaultLocalization(input: unknown): boolean;
    private defaultLocalizeFieldValue;
    toOutputValue(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    private maybeVisitListValue;
    protected convertObjectLocaleValues<FieldValueType = any, ReturnFieldValueType = any>(localized: Record<string, FieldValueType>, convertValue: (value: FieldValueType, localeCode: string) => ReturnFieldValueType, treeContext: ModelTreeContext): Record<string, ReturnFieldValueType>;
    private parseVisitedInputListLocalized;
    toOutputValueList(input: any, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    private maybeVisitSingleValue;
    private parseVisitedInputSingleLocalized;
    toOutputValueSingle(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toListFieldValue(input: unknown, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    private notImplemented;
    protected removeObjectKeysThatHaveNoFieldWithThatName(visited: any): Record<string, any>;
    protected toConnectFieldsDefinitionSDL(): string;
    protected modelFieldToGraphQLFieldSDL(modelField: ResolvedModelField, opts?: {
        proxyFrom: string;
        asTypeName?: string;
        linkFrom?: string;
    }): string;
    protected modelFieldToCreateGraphQLProxy(modelField: ResolvedModelField, proxyFrom?: string): string;
    protected proxyFrom(proxyFrom: string): string;
    protected modelFieldToSharedCreateProperties(modelField: ResolvedModelField): CSITypes.FieldCommonProps;
    protected modelFieldToSharedCreateNumberProperties(modelField: ResolvedModelField): CSITypes.FieldNumberProps;
    protected modelFieldToSharedControlType(field: ResolvedModelField): "slider" | "button-group" | "checkbox" | "dropdown" | "thumbnail" | undefined;
    toConnectDefinition(_ctx?: ModelContext): string | null;
    toConnectFieldDefinition(modelField: ResolvedModelField): string | null;
    toConnectSingleFieldDefinition(_modelField: ResolvedModelField): string;
    toConnectListFieldDefinition(_modelField: ResolvedModelField): string;
    toCreateDefinition(): Editor.ObjectModel | Editor.PageModel | Editor.DataModel | null;
    toCreateFieldDefinition(modelField: ModelField): null | CSITypes.Field | CSITypes.FieldList;
    toCreateSingleFieldDefinition(_modelField: ResolvedModelField): null | CSITypes.Field;
    toCreateListFieldDefinition(_modelField: ResolvedModelField): CSITypes.Field | null;
    toCreateSingleFieldValue(_input: unknown, _coersionField: CoersionField, _treeContext: ModelTreeContext): unknown;
    toCreateSingleFieldValueLocalized(_input: unknown, _coersionField: CoersionField, _treeContext: ModelTreeContext): unknown;
    toCreateListFieldValue(_input: unknown, _coersionField: CoersionField, _treeContext: ModelTreeContext): unknown;
    toCreateListFieldValueLocalized(input: Record<string, unknown>, field: CoersionField, treeContext: ModelTreeContext): Editor.DocumentListFieldLocalized;
    toConnectSingleFieldValue(_input: unknown, _coersionField: CoersionField, _treeContext: ModelTreeContext): unknown;
    toConnectSingleFieldValueLocalized(input: Record<string, unknown>, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    toConnectListFieldValue(_input: unknown, _coersionField: CoersionField, _treeContext: ModelTreeContext): unknown;
    toConnectListFieldValueLocalized(input: Record<string, unknown>, coersionField: CoersionField, treeContext: ModelTreeContext): unknown;
    parseVisitedInputSingle(_visited: unknown, _coersionField: CoersionField, _treeContext: ModelTreeContext): unknown;
    parseVisitedInputList(_visited: unknown, _coersionField: CoersionField, _treeContext: ModelTreeContext): unknown;
    private resolveModelField;
}
//# sourceMappingURL=transformer.d.ts.map