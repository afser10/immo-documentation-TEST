{"version":3,"file":"sanitize-node.js","names":["_lodash","_interopRequireDefault","require","_lodash2","_lodash3","omitUndefined","data","isPlain","isPlainObject","pickBy","p","undefined","filter","isTypeSupported","type","isSupported","Date","sanitizeNode","isNode","path","Set","isArray","Array","has","add","returnData","anyFieldChanged","hasLengthProperty","Object","prototype","hasOwnProperty","call","lengthProperty","length","forEach","value","key","exports"],"sources":["../../src/utils/sanitize-node.ts"],"sourcesContent":["import forEach from \"lodash.foreach\";\nimport isPlainObject from \"lodash.isplainobject\";\nimport pickBy from \"lodash.pickby\";\n\nimport type { IGatsbyNode } from \"../redux/types\";\nimport type { GatsbyIterable } from \"../datastore/common/iterable\";\n\ntype Data = IGatsbyNode | GatsbyIterable<IGatsbyNode>;\n\ntype OmitUndefined = (data: Data) => Partial<Data>;\n\n/**\n * @param {Object|Array} data\n * @returns {Object|Array} data without undefined values\n */\nconst omitUndefined: OmitUndefined = (data) => {\n  const isPlain = isPlainObject(data);\n  if (isPlain) {\n    return pickBy(data, (p) => p !== undefined);\n  }\n\n  return (data as GatsbyIterable<IGatsbyNode>).filter((p) => p !== undefined);\n};\n\ntype isTypeSupported = (data: Data) => boolean;\n\n/**\n * @param {*} data\n * @return {boolean} Boolean if type is supported\n */\nconst isTypeSupported: isTypeSupported = (data) => {\n  if (data === null) {\n    return true;\n  }\n\n  const type = typeof data;\n  const isSupported =\n    type === `number` ||\n    type === `string` ||\n    type === `boolean` ||\n    data instanceof Date;\n\n  return isSupported;\n};\n\ntype sanitizeNode = (\n  data: Data,\n  isNode?: boolean,\n  path?: Set<unknown>,\n) => Data | undefined;\n\n/**\n * Make data serializable\n * @param {(Object|Array)} data to sanitize\n * @param {boolean} isNode = true\n * @param {Set<string>} path = new Set\n */\nexport const sanitizeNode: sanitizeNode = (\n  data,\n  isNode = true,\n  path = new Set(),\n) => {\n  const isPlain = isPlainObject(data);\n  const isArray = Array.isArray(data);\n\n  if (isPlain || isArray) {\n    if (path.has(data)) return data;\n    path.add(data);\n\n    const returnData = isPlain\n      ? ({} as IGatsbyNode)\n      : ([] as Array<IGatsbyNode>);\n    let anyFieldChanged = false;\n\n    // _.each is a \"Collection\" method and thus objects with \"length\" property are iterated as arrays\n    const hasLengthProperty = isPlain\n      ? Object.prototype.hasOwnProperty.call(data, `length`)\n      : false;\n    let lengthProperty;\n    if (hasLengthProperty) {\n      lengthProperty = (data as IGatsbyNode).length;\n      delete (data as IGatsbyNode).length;\n    }\n\n    forEach(data, (value, key) => {\n      if (isNode && key === `internal`) {\n        returnData[key] = value;\n        return;\n      }\n      returnData[key] = sanitizeNode(value as Data, false, path);\n\n      if (returnData[key] !== value) {\n        anyFieldChanged = true;\n      }\n    });\n\n    if (hasLengthProperty) {\n      (data as IGatsbyNode).length = lengthProperty;\n      returnData.length = sanitizeNode(lengthProperty as Data, false, path);\n      if (returnData.length !== lengthProperty) {\n        anyFieldChanged = true;\n      }\n    }\n\n    if (anyFieldChanged) {\n      data = omitUndefined(returnData as Data) as Data;\n    }\n\n    // arrays and plain objects are supported - no need to to sanitize\n    return data;\n  }\n\n  if (!isTypeSupported(data)) {\n    return undefined;\n  } else {\n    return data;\n  }\n};\n"],"mappings":"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"}