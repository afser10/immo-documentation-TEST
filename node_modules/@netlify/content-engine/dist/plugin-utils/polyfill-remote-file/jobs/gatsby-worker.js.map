{"version":3,"file":"gatsby-worker.js","names":["_path","_interopRequireDefault","require","_fetchRemoteFile","_cpuCoreCount","_fastq","_transformImages","queue","Queue","transform","task","cb","transformImage","e","process","env","GATSBY_WORKER_POOL_WORKER","Math","max","cpuCoreCount","FILE_CDN","outputDir","args","url","filename","contentDigest","httpHeaders","ext","path","extname","fetchRemoteFile","directory","name","basename","cacheKey","excludeDigest","IMAGE_CDN","Promise","resolve","reject","push","err"],"sources":["../../../../src/plugin-utils/polyfill-remote-file/jobs/gatsby-worker.ts"],"sourcesContent":["import path from \"path\";\nimport { fetchRemoteFile } from \"../../../core-utils/fetch-remote-file\";\nimport { cpuCoreCount } from \"../../../core-utils/cpu-core-count\";\nimport Queue from \"fastq\";\nimport { transformImage } from \"../transform-images\";\n\ninterface IImageServiceProps {\n  outputDir: Parameters<typeof transformImage>[0][\"outputDir\"];\n  args: Parameters<typeof transformImage>[0][\"args\"] & {\n    contentDigest: string;\n  };\n}\n\nconst queue = Queue<null, IImageServiceProps, string>(\n  async function transform(task, cb): Promise<void> {\n    try {\n      cb(null, await transformImage(task));\n    } catch (e) {\n      cb(e);\n    }\n  },\n  // When inside query workers, we only want to use the current core\n  process.env.GATSBY_WORKER_POOL_WORKER ? 1 : Math.max(1, cpuCoreCount() - 1),\n);\n\nexport async function FILE_CDN({\n  outputDir,\n  args: { url, filename, contentDigest, httpHeaders },\n}: {\n  outputDir: string;\n  args: {\n    url: string;\n    filename: string;\n    contentDigest: string;\n    httpHeaders: Record<string, string>;\n  };\n}): Promise<void> {\n  const ext = path.extname(filename);\n\n  await fetchRemoteFile({\n    directory: outputDir,\n    url,\n    name: path.basename(filename, ext),\n    ext,\n    cacheKey: contentDigest,\n    excludeDigest: true,\n    httpHeaders,\n  });\n}\n\nexport async function IMAGE_CDN(args: {\n  outputDir: Parameters<typeof transformImage>[0][\"outputDir\"];\n  args: Parameters<typeof transformImage>[0][\"args\"] & {\n    contentDigest: string;\n  };\n}): Promise<void> {\n  return new Promise((resolve, reject) => {\n    queue.push(args, (err) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve();\n    });\n  });\n}\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAD,OAAA;AACA,IAAAE,aAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,gBAAA,GAAAJ,OAAA;AASA,MAAMK,KAAK,GAAG,IAAAC,cAAK,EACjB,eAAeC,SAASA,CAACC,IAAI,EAAEC,EAAE,EAAiB;EAChD,IAAI;IACFA,EAAE,CAAC,IAAI,EAAE,MAAM,IAAAC,+BAAc,EAACF,IAAI,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOG,CAAC,EAAE;IACVF,EAAE,CAACE,CAAC,CAAC;EACP;AACF,CAAC;AACD;AACAC,OAAO,CAACC,GAAG,CAACC,yBAAyB,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAAC,0BAAY,EAAC,CAAC,GAAG,CAAC,CAC5E,CAAC;AAEM,eAAeC,QAAQA,CAAC;EAC7BC,SAAS;EACTC,IAAI,EAAE;IAAEC,GAAG;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAY;AASpD,CAAC,EAAiB;EAChB,MAAMC,GAAG,GAAGC,aAAI,CAACC,OAAO,CAACL,QAAQ,CAAC;EAElC,MAAM,IAAAM,gCAAe,EAAC;IACpBC,SAAS,EAAEV,SAAS;IACpBE,GAAG;IACHS,IAAI,EAAEJ,aAAI,CAACK,QAAQ,CAACT,QAAQ,EAAEG,GAAG,CAAC;IAClCA,GAAG;IACHO,QAAQ,EAAET,aAAa;IACvBU,aAAa,EAAE,IAAI;IACnBT;EACF,CAAC,CAAC;AACJ;AAEO,eAAeU,SAASA,CAACd,IAK/B,EAAiB;EAChB,OAAO,IAAIe,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtChC,KAAK,CAACiC,IAAI,CAAClB,IAAI,EAAGmB,GAAG,IAAK;MACxB,IAAIA,GAAG,EAAE;QACPF,MAAM,CAACE,GAAG,CAAC;QACX;MACF;MAEAH,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ"}