{"version":3,"file":"index.js","names":["_date","require","GraphQLDirective","DirectiveLocation","specifiedDirectives","link","fileByPath","inferExtensionName","exports","dontInferExtensionName","typeExtensions","description","mimeTypes","args","types","type","defaultValue","childOf","nodeInterface","locations","INTERFACE","authorization","labels","OBJECT","FIELD_DEFINITION","builtInFieldExtensions","dateformat","name","formatString","locale","fromNow","difference","extend","fieldConfig","getDateResolver","by","from","on","keepObjects","schemaComposer","_schemaComposer$typeM","typeMapper","convertSDLWrappedTypeName","getType","resolve","fileByRelativePath","proxy","options","source","context","info","resolver","defaultFieldResolver","internalExtensionNames","map","directive","reservedExtensionNames","Object","keys","toDirectives","extensions","defaultLocations","extension","createTC","normalizedArgs","convertArgConfigMap","forEach","argName","addDirectives","fieldExtensions","fieldDirectives","addDirective","typeDirectives","processFieldExtensions","typeComposer","parentSpan","getFieldNames","fieldName","getFieldExtensions","filter","includes","prevFieldConfig","getFieldConfig","extendField"],"sources":["../../../src/schema/extensions/index.ts"],"sourcesContent":["const { GraphQLDirective, DirectiveLocation, specifiedDirectives } = require(\n  `graphql`,\n);\n\nconst { link, fileByPath } = require(`../resolvers`);\nimport { getDateResolver } from \"../types/date\";\n\nimport { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\";\nimport { ComposeOutputType } from \"graphql-compose\";\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  type?: ComposeOutputType<any>;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig<any, any>,\n  ): any;\n}\n\nconst inferExtensionName = `infer`;\nconst dontInferExtensionName = `dontInfer`;\n\nconst typeExtensions = {\n  [inferExtensionName]: {\n    description: `Infer field types from field values.`,\n  },\n  [dontInferExtensionName]: {\n    description: `Do not infer field types from field values.`,\n  },\n  mimeTypes: {\n    description: `Define the mime-types handled by this type.`,\n    args: {\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description: `The mime-types handled by this type.`,\n      },\n    },\n  },\n  childOf: {\n    description:\n      `Define parent-child relations between types. This is used to add ` +\n      `\\`child*\\` and \\`children*\\` convenience fields like \\`childImageSharp\\`.`,\n    args: {\n      mimeTypes: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of mime-types this type is a child of. Usually these are ` +\n          `the mime-types handled by a transformer plugin.`,\n      },\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of types this type is a child of. Usually these are the ` +\n          `types handled by a transformer plugin.`,\n      },\n    },\n  },\n  nodeInterface: {\n    description:\n      `DEPRECATED: Use interface inheritance instead, i.e. \"interface Foo implements Node\".\\n\\n` +\n      `Adds root query fields for an interface. All implementing types ` +\n      `must also implement the Node interface.`,\n    locations: [DirectiveLocation.INTERFACE],\n  },\n  authorization: {\n    description: `Define authorization rules for this type.`,\n    args: {\n      labels: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description: `A list of auth scopes that are allowed to access this type.`,\n      },\n    },\n    locations: [DirectiveLocation.OBJECT, DirectiveLocation.FIELD_DEFINITION],\n  },\n};\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formatting options.`,\n    args: {\n      formatString: `String`,\n      locale: `String`,\n      fromNow: `Boolean`,\n      difference: `String`,\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args, fieldConfig);\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: `String!`,\n        defaultValue: `id`,\n      },\n      from: `String`,\n      on: `String`,\n      keepObjects: `Boolean`,\n    },\n    extend(args, fieldConfig, schemaComposer) {\n      const type =\n        args.on &&\n        schemaComposer.typeMapper.convertSDLWrappedTypeName(args.on)?.getType();\n      return {\n        resolve: link({ ...args, type }, fieldConfig),\n      };\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: fileByPath(args, fieldConfig),\n      };\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: `String!`,\n    },\n    extend(options, fieldConfig) {\n      return {\n        resolve(source, args, context, info) {\n          const resolver = fieldConfig.resolve || context.defaultFieldResolver;\n          return resolver(source, args, context, {\n            ...info,\n            from: options.from || info.from,\n          });\n        },\n      };\n    },\n  },\n};\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n  ...specifiedDirectives.map((directive) => directive.name),\n];\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n];\n\nconst toDirectives = ({\n  schemaComposer,\n  extensions,\n  locations: defaultLocations,\n}) =>\n  Object.keys(extensions).map((name) => {\n    const extension = extensions[name];\n    const { args, description, locations, type } = extension;\n    // Allow field extensions to register a return type\n    if (type) {\n      schemaComposer.createTC(type);\n    }\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args);\n\n    // arg.type is a composer that needs to be converted to graphql-js type\n    Object.keys(normalizedArgs).forEach((argName) => {\n      normalizedArgs[argName].type = normalizedArgs[argName].type.getType();\n    });\n\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations: locations || defaultLocations,\n    });\n  });\n\n// @ts-ignore\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  });\n  fieldDirectives.forEach((directive) =>\n    schemaComposer.addDirective(directive),\n  );\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  });\n  typeDirectives.forEach((directive) => schemaComposer.addDirective(directive));\n};\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  // @ts-ignore\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach((fieldName) => {\n    const extensions = typeComposer.getFieldExtensions(fieldName);\n    Object.keys(extensions)\n      .filter((name) => !internalExtensionNames.includes(name))\n      .forEach((name) => {\n        const { extend } = fieldExtensions[name] || {};\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName);\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig, schemaComposer),\n          );\n        }\n      });\n  });\n};\n\nexport {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n  inferExtensionName,\n  dontInferExtensionName,\n};\n"],"mappings":";;;;AAKA,IAAAA,KAAA,GAAAC,OAAA;AALA,MAAM;EAAEC,gBAAgB;EAAEC,iBAAiB;EAAEC;AAAoB,CAAC,GAAGH,OAAO,CACzE,SACH,CAAC;AAED,MAAM;EAAEI,IAAI;EAAEC;AAAW,CAAC,GAAGL,OAAO,CAAE,cAAa,CAAC;AAgBpD,MAAMM,kBAAkB,GAAAC,OAAA,CAAAD,kBAAA,GAAI,OAAM;AAClC,MAAME,sBAAsB,GAAAD,OAAA,CAAAC,sBAAA,GAAI,WAAU;AAE1C,MAAMC,cAAc,GAAG;EACrB,CAACH,kBAAkB,GAAG;IACpBI,WAAW,EAAG;EAChB,CAAC;EACD,CAACF,sBAAsB,GAAG;IACxBE,WAAW,EAAG;EAChB,CAAC;EACDC,SAAS,EAAE;IACTD,WAAW,EAAG,6CAA4C;IAC1DE,IAAI,EAAE;MACJC,KAAK,EAAE;QACLC,IAAI,EAAG,YAAW;QAClBC,YAAY,EAAE,EAAE;QAChBL,WAAW,EAAG;MAChB;IACF;EACF,CAAC;EACDM,OAAO,EAAE;IACPN,WAAW,EACR,mEAAkE,GAClE,2EAA0E;IAC7EE,IAAI,EAAE;MACJD,SAAS,EAAE;QACTG,IAAI,EAAG,YAAW;QAClBC,YAAY,EAAE,EAAE;QAChBL,WAAW,EACR,kEAAiE,GACjE;MACL,CAAC;MACDG,KAAK,EAAE;QACLC,IAAI,EAAG,YAAW;QAClBC,YAAY,EAAE,EAAE;QAChBL,WAAW,EACR,iEAAgE,GAChE;MACL;IACF;EACF,CAAC;EACDO,aAAa,EAAE;IACbP,WAAW,EACR,0FAAyF,GACzF,kEAAiE,GACjE,yCAAwC;IAC3CQ,SAAS,EAAE,CAAChB,iBAAiB,CAACiB,SAAS;EACzC,CAAC;EACDC,aAAa,EAAE;IACbV,WAAW,EAAG,2CAA0C;IACxDE,IAAI,EAAE;MACJS,MAAM,EAAE;QACNP,IAAI,EAAG,YAAW;QAClBC,YAAY,EAAE,EAAE;QAChBL,WAAW,EAAG;MAChB;IACF,CAAC;IACDQ,SAAS,EAAE,CAAChB,iBAAiB,CAACoB,MAAM,EAAEpB,iBAAiB,CAACqB,gBAAgB;EAC1E;AACF,CAAC;AAED,MAAMC,sBAAsB,GAAAjB,OAAA,CAAAiB,sBAAA,GAAG;EAC7BC,UAAU,EAAE;IACVC,IAAI,EAAG,YAAW;IAClBhB,WAAW,EAAG,8BAA6B;IAC3CE,IAAI,EAAE;MACJe,YAAY,EAAG,QAAO;MACtBC,MAAM,EAAG,QAAO;MAChBC,OAAO,EAAG,SAAQ;MAClBC,UAAU,EAAG;IACf,CAAC;IACDC,MAAMA,CAACnB,IAAI,EAAEoB,WAAW,EAAE;MACxB,OAAO,IAAAC,qBAAe,EAACrB,IAAI,EAAEoB,WAAW,CAAC;IAC3C;EACF,CAAC;EAED5B,IAAI,EAAE;IACJsB,IAAI,EAAG,MAAK;IACZhB,WAAW,EAAG,uCAAsC;IACpDE,IAAI,EAAE;MACJsB,EAAE,EAAE;QACFpB,IAAI,EAAG,SAAQ;QACfC,YAAY,EAAG;MACjB,CAAC;MACDoB,IAAI,EAAG,QAAO;MACdC,EAAE,EAAG,QAAO;MACZC,WAAW,EAAG;IAChB,CAAC;IACDN,MAAMA,CAACnB,IAAI,EAAEoB,WAAW,EAAEM,cAAc,EAAE;MAAA,IAAAC,qBAAA;MACxC,MAAMzB,IAAI,GACRF,IAAI,CAACwB,EAAE,MAAAG,qBAAA,GACPD,cAAc,CAACE,UAAU,CAACC,yBAAyB,CAAC7B,IAAI,CAACwB,EAAE,CAAC,cAAAG,qBAAA,uBAA5DA,qBAAA,CAA8DG,OAAO,CAAC,CAAC;MACzE,OAAO;QACLC,OAAO,EAAEvC,IAAI,CAAC;UAAE,GAAGQ,IAAI;UAAEE;QAAK,CAAC,EAAEkB,WAAW;MAC9C,CAAC;IACH;EACF,CAAC;EAEDY,kBAAkB,EAAE;IAClBlB,IAAI,EAAG,oBAAmB;IAC1BhB,WAAW,EAAG,qCAAoC;IAClDE,IAAI,EAAE;MACJuB,IAAI,EAAG;IACT,CAAC;IACDJ,MAAMA,CAACnB,IAAI,EAAEoB,WAAW,EAAE;MACxB,OAAO;QACLW,OAAO,EAAEtC,UAAU,CAACO,IAAI,EAAEoB,WAAW;MACvC,CAAC;IACH;EACF,CAAC;EAEDa,KAAK,EAAE;IACLnB,IAAI,EAAG,OAAM;IACbhB,WAAW,EAAG,oCAAmC;IACjDE,IAAI,EAAE;MACJuB,IAAI,EAAG;IACT,CAAC;IACDJ,MAAMA,CAACe,OAAO,EAAEd,WAAW,EAAE;MAC3B,OAAO;QACLW,OAAOA,CAACI,MAAM,EAAEnC,IAAI,EAAEoC,OAAO,EAAEC,IAAI,EAAE;UACnC,MAAMC,QAAQ,GAAGlB,WAAW,CAACW,OAAO,IAAIK,OAAO,CAACG,oBAAoB;UACpE,OAAOD,QAAQ,CAACH,MAAM,EAAEnC,IAAI,EAAEoC,OAAO,EAAE;YACrC,GAAGC,IAAI;YACPd,IAAI,EAAEW,OAAO,CAACX,IAAI,IAAIc,IAAI,CAACd;UAC7B,CAAC,CAAC;QACJ;MACF,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,MAAMiB,sBAAsB,GAAA7C,OAAA,CAAA6C,sBAAA,GAAG,CAC5B,aAAY,EACZ,SAAQ,EACR,YAAW,EACX,OAAM,EACN,QAAO,EACR,GAAGjD,mBAAmB,CAACkD,GAAG,CAAEC,SAAS,IAAKA,SAAS,CAAC5B,IAAI,CAAC,CAC1D;AACD,MAAM6B,sBAAsB,GAAAhD,OAAA,CAAAgD,sBAAA,GAAG,CAC7B,GAAGH,sBAAsB,EACzB,GAAGI,MAAM,CAACC,IAAI,CAACjC,sBAAsB,CAAC,CACvC;AAED,MAAMkC,YAAY,GAAGA,CAAC;EACpBpB,cAAc;EACdqB,UAAU;EACVzC,SAAS,EAAE0C;AACb,CAAC,KACCJ,MAAM,CAACC,IAAI,CAACE,UAAU,CAAC,CAACN,GAAG,CAAE3B,IAAI,IAAK;EACpC,MAAMmC,SAAS,GAAGF,UAAU,CAACjC,IAAI,CAAC;EAClC,MAAM;IAAEd,IAAI;IAAEF,WAAW;IAAEQ,SAAS;IAAEJ;EAAK,CAAC,GAAG+C,SAAS;EACxD;EACA,IAAI/C,IAAI,EAAE;IACRwB,cAAc,CAACwB,QAAQ,CAAChD,IAAI,CAAC;EAC/B;EACA;EACA,MAAMiD,cAAc,GAAGzB,cAAc,CAACE,UAAU,CAACwB,mBAAmB,CAACpD,IAAI,CAAC;;EAE1E;EACA4C,MAAM,CAACC,IAAI,CAACM,cAAc,CAAC,CAACE,OAAO,CAAEC,OAAO,IAAK;IAC/CH,cAAc,CAACG,OAAO,CAAC,CAACpD,IAAI,GAAGiD,cAAc,CAACG,OAAO,CAAC,CAACpD,IAAI,CAAC4B,OAAO,CAAC,CAAC;EACvE,CAAC,CAAC;EAEF,OAAO,IAAIzC,gBAAgB,CAAC;IAC1ByB,IAAI;IACJd,IAAI,EAAEmD,cAAc;IACpBrD,WAAW;IACXQ,SAAS,EAAEA,SAAS,IAAI0C;EAC1B,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJ;AACA,MAAMO,aAAa,GAAGA,CAAC;EAAE7B,cAAc;EAAE8B,eAAe,GAAG,CAAC;AAAE,CAAC,KAAK;EAClE,MAAMC,eAAe,GAAGX,YAAY,CAAC;IACnCpB,cAAc;IACdqB,UAAU,EAAES,eAAe;IAC3BlD,SAAS,EAAE,CAAChB,iBAAiB,CAACqB,gBAAgB;EAChD,CAAC,CAAC;EACF8C,eAAe,CAACJ,OAAO,CAAEX,SAAS,IAChChB,cAAc,CAACgC,YAAY,CAAChB,SAAS,CACvC,CAAC;EACD,MAAMiB,cAAc,GAAGb,YAAY,CAAC;IAClCpB,cAAc;IACdqB,UAAU,EAAElD,cAAc;IAC1BS,SAAS,EAAE,CAAChB,iBAAiB,CAACoB,MAAM;EACtC,CAAC,CAAC;EACFiD,cAAc,CAACN,OAAO,CAAEX,SAAS,IAAKhB,cAAc,CAACgC,YAAY,CAAChB,SAAS,CAAC,CAAC;AAC/E,CAAC;AAAC/C,OAAA,CAAA4D,aAAA,GAAAA,aAAA;AAEF,MAAMK,sBAAsB,GAAGA,CAAC;EAC9BJ,eAAe,GAAG,CAAC,CAAC;EACpB9B,cAAc;EACdmC,YAAY;EACZ;EACAC;AACF,CAAC,KAAK;EACJD,YAAY,CAACE,aAAa,CAAC,CAAC,CAACV,OAAO,CAAEW,SAAS,IAAK;IAClD,MAAMjB,UAAU,GAAGc,YAAY,CAACI,kBAAkB,CAACD,SAAS,CAAC;IAC7DpB,MAAM,CAACC,IAAI,CAACE,UAAU,CAAC,CACpBmB,MAAM,CAAEpD,IAAI,IAAK,CAAC0B,sBAAsB,CAAC2B,QAAQ,CAACrD,IAAI,CAAC,CAAC,CACxDuC,OAAO,CAAEvC,IAAI,IAAK;MACjB,MAAM;QAAEK;MAAO,CAAC,GAAGqC,eAAe,CAAC1C,IAAI,CAAC,IAAI,CAAC,CAAC;MAC9C,IAAI,OAAOK,MAAM,KAAM,UAAS,EAAE;QAChC;QACA;QACA,MAAMiD,eAAe,GAAGP,YAAY,CAACQ,cAAc,CAACL,SAAS,CAAC;QAC9DH,YAAY,CAACS,WAAW,CACtBN,SAAS,EACT7C,MAAM,CAAC4B,UAAU,CAACjC,IAAI,CAAC,EAAEsD,eAAe,EAAE1C,cAAc,CAC1D,CAAC;MACH;IACF,CAAC,CAAC;EACN,CAAC,CAAC;AACJ,CAAC;AAAC/B,OAAA,CAAAiE,sBAAA,GAAAA,sBAAA"}