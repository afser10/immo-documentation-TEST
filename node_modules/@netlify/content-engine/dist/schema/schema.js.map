{"version":3,"file":"schema.js","names":["_lodash","_interopRequireDefault","require","_lodash2","_invariant","_graphql","_graphqlCompose","_datastore","_apiRunnerNode","_reporter","_nodeInterface","_builtInTypes","_infer","_remoteFileInterface","_resolvers","_extensions","_pagination","_sort","_filter","_typeBuilders","_typeDefs","_print","buildSchema","schemaComposer","types","typeMapping","fieldExtensions","thirdPartySchemas","printConfig","enginePrintConfig","typeConflictReporter","inferenceMetadata","parentSpan","getDataStore","ready","updateSchemaComposer","schema","freezeTypeComposers","exports","excluded","Set","Array","from","values","forEach","tc","isCompositeTC","ObjectTypeComposer","InterfaceTypeComposer","has","getTypeName","type","getType","activity","report","phantomActivity","start","addTypes","span","end","addInferredTypes","addInferredChildOfExtensions","process","env","GATSBY_SKIP_WRITING_SCHEMA_TO_FILE","printTypeDefinitions","config","addSetFieldsOnGraphQLNodeTypeFields","addConvenienceChildrenFields","Promise","all","map","typeComposer","processTypeComposer","checkQueryableInterfaces","addThirdPartySchemas","addCustomResolveFunctions","attachTracingResolver","processFieldExtensions","hasInterface","addNodeInterfaceFields","addRemoteFileInterfaceFields","determineSearchableFields","addTypeToRootQuery","isNodeInterface","fieldNames","query","typeName","camelCase","queryAll","convenienceChild","convenienceChildren","typeOrTypeDef","plugin","parseTypeDef","isASTDocument","parsedTypes","createdFrom","parseTypes","doc","error","reportParsingError","processAddedType","isGatsbyType","createTypeComposerFromGatsbyType","checkIsAllowedTypeName","get","mergeTypes","name","typeOwner","getExtension","isSafeMerge","warn","GraphQLObjectType","GraphQLInterfaceType","mergeFields","fields","getFields","getInterfaces","iface","addInterface","GraphQLUnionType","UnionTypeComposer","mergeResolveType","extensions","isNamedTypeComposer","convertDirectivesToExtensions","getDirectives","extendExtensions","getExtensions","addExtensions","add","getResolveType","setResolveType","node","_node$internal","internal","__typename","addSchemaMustHaveType","directives","args","setExtension","hasCorrectIdField","hasField","getFieldType","toString","panic","InputTypeComposer","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","getFieldExtensions","Object","keys","filter","internalExtensionNames","includes","definition","getDirective","defaultValue","undefined","arg","argumentDef","find","value","validate","message","invariant","endsWith","builtInScalarTypeNames","assertValidName","kind","GatsbyGraphQLTypeKind","OBJECT","createTemp","typeMapper","convertOutputFieldConfigMap","interfaces","tmpComposer","createInterfaceTC","getIFTC","INPUT_OBJECT","convertInputFieldConfigMap","UNION","createObjectTC","getOTC","INTERFACE","ENUM","EnumTypeComposer","SCALAR","ScalarTypeComposer","JSON","stringify","result","apiRunnerNode","nodes","getNodesByType","traceId","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getTypeMap","isSpecifiedScalarType","isIntrospectionType","typeHasFields","_fields","createTC","resetOverriddenThirdPartyTypeFields","getFieldExtension","removeField","fieldType","String","replace","extendField","intermediateSchema","createResolvers","resolvers","ignoreNonexistentTypes","fieldConfig","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","isArray","stringifyArray","newConfig","source","context","info","defaultFieldResolver","extendFieldExtensions","needsResolve","field","getField","resolver","wrappingResolver","defaultResolver","_schemaComposer","dateformat","searchable","SEARCHABLE_ENUM","SEARCHABLE","sortable","SORTABLE_ENUM","SORTABLE","proxy","isEmpty","DEPRECATED_SEARCHABLE","DEPRECATED_SORTABLE","parentTypesToChildren","Map","mimeTypesToChildren","typesHandlingMimeTypes","hasExtension","mimeType","set","mimeTypes","parentType","children","parent","getAnyTC","child","createChildrenField","createChildField","parentTypes","isExplicitChild","childTypeComposer","_typeComposer$getExte","_childOfExtension$typ","_childOfExtension$mim","childOfExtension","parentMimeTypes","some","addInferredChildOfExtension","shouldInfer","parentTypeName","childNodeTypes","iterateNodesByType","getNode","childNode","_childNode$internal","push","description","_args","path","nodeModel","getNodesByIds","ids","length","filterInputTC","getFilterInput","paginationTC","getPagination","queryName","queryNamePlural","findOne","sort","getSortInputNestedObjects","skip","limit","findManyPaginated","makeFieldNonNull","definitions","def","parsedType","makeSchemaDef","ifaceName","_gqType","delete","arr","item","GraphQLNonNull","Error","ofType","GraphQLList","v","parseValue","interfaceTypeComposer","queryableInterfaces","incorrectTypes","size","t","join","entries","setField","resolveType","_node$internal2"],"sources":["../../src/schema/schema.ts"],"sourcesContent":["import camelCase from \"lodash.camelcase\";\nimport isEmpty from \"lodash.isempty\";\nimport invariant from \"invariant\";\nimport {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  assertValidName,\n  GraphQLNonNull,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} from \"graphql\";\nimport {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n  ScalarTypeComposer,\n  EnumTypeComposer,\n} from \"graphql-compose\";\nimport { getDataStore, getNode, getNodesByType } from \"../datastore\";\n\nimport apiRunnerNode from \"../utils/api-runner-node\";\nimport report from \"../reporter\";\nimport { addNodeInterfaceFields } from \"./types/node-interface\";\nimport { builtInScalarTypeNames } from \"./types/built-in-types\";\nimport { addInferredTypes } from \"./infer\";\nimport { addRemoteFileInterfaceFields } from \"./types/remote-file-interface\";\n\nimport {\n  findOne,\n  findManyPaginated,\n  wrappingResolver,\n  defaultResolver,\n} from \"./resolvers\";\nimport { processFieldExtensions, internalExtensionNames } from \"./extensions\";\nimport { getPagination } from \"./types/pagination\";\nimport {\n  SORTABLE_ENUM,\n  // getSortInput,\n  getSortInputNestedObjects,\n} from \"./types/sort\";\nimport { getFilterInput, SEARCHABLE_ENUM } from \"./types/filter\";\nimport { isGatsbyType, GatsbyGraphQLTypeKind } from \"./types/type-builders\";\n\nimport {\n  isASTDocument,\n  parseTypeDef,\n  reportParsingError,\n} from \"./types/type-defs\";\nimport { printTypeDefinitions } from \"./print\";\n\nconst buildSchema = async ({\n  schemaComposer,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  enginePrintConfig,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  // FIXME: consider removing .ready here - it is needed for various tests to pass (although probably harmless)\n  await getDataStore().ready();\n  await updateSchemaComposer({\n    schemaComposer,\n    types,\n    typeMapping,\n    fieldExtensions,\n    thirdPartySchemas,\n    printConfig,\n    enginePrintConfig,\n    typeConflictReporter,\n    inferenceMetadata,\n    parentSpan,\n  });\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema();\n  freezeTypeComposers(schemaComposer);\n\n  // console.log(printSchema(schema))\n  return schema;\n};\n\nexport { buildSchema };\n\n// Workaround for https://github.com/graphql-compose/graphql-compose/issues/319\n//  FIXME: remove this when fixed in graphql-compose\nconst freezeTypeComposers = (schemaComposer, excluded = new Set()) => {\n  Array.from(schemaComposer.values()).forEach((tc) => {\n    const isCompositeTC =\n      tc instanceof ObjectTypeComposer || tc instanceof InterfaceTypeComposer;\n\n    if (isCompositeTC && !excluded.has(tc.getTypeName())) {\n      // typeComposer.getType() actually mutates the underlying GraphQL type\n      //   and always re-assigns type._fields with a thunk.\n      //   It causes continuous redundant field re-definitions when running queries\n      //   (affects performance significantly).\n      //   Prevent the mutation and \"freeze\" the type:\n      const type = tc.getType();\n      // @ts-ignore\n      tc.getType = () => type;\n    }\n  });\n};\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  enginePrintConfig,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  let activity = report.phantomActivity(`Add explicit types`, {\n    parentSpan: parentSpan,\n  });\n  activity.start();\n  await addTypes({ schemaComposer, parentSpan: activity.span, types });\n  activity.end();\n\n  activity = report.phantomActivity(`Add inferred types`, {\n    parentSpan: parentSpan,\n  });\n  activity.start();\n  await addInferredTypes({\n    schemaComposer,\n    typeConflictReporter,\n    typeMapping,\n    inferenceMetadata,\n    parentSpan: activity.span,\n  });\n  addInferredChildOfExtensions({\n    schemaComposer,\n  });\n  activity.end();\n\n  activity = report.phantomActivity(`Processing types`, {\n    parentSpan: parentSpan,\n  });\n  activity.start();\n  if (!process.env.GATSBY_SKIP_WRITING_SCHEMA_TO_FILE) {\n    await printTypeDefinitions({\n      config: printConfig,\n      schemaComposer,\n      // parentSpan: activity.span,\n    });\n    if (enginePrintConfig) {\n      // make sure to print schema that will be used when bundling graphql-engine\n      await printTypeDefinitions({\n        config: enginePrintConfig,\n        schemaComposer,\n        // parentSpan: activity.span,\n      });\n    }\n  }\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    parentSpan: activity.span,\n  });\n  await addConvenienceChildrenFields({\n    schemaComposer,\n    // parentSpan: activity.span,\n  });\n  await Promise.all(\n    Array.from(new Set(schemaComposer.values())).map((typeComposer) =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan: activity.span,\n      }),\n    ),\n  );\n  checkQueryableInterfaces({\n    schemaComposer,\n    // parentSpan: activity.span\n  });\n  await addThirdPartySchemas({\n    schemaComposer,\n    thirdPartySchemas,\n    // @ts-ignore\n    parentSpan: activity.span,\n  });\n  await addCustomResolveFunctions({\n    schemaComposer,\n    parentSpan: activity.span,\n  });\n  attachTracingResolver({\n    schemaComposer,\n    // parentSpan: activity.span\n  });\n  activity.end();\n};\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  fieldExtensions,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({\n      schemaComposer,\n      typeComposer,\n      fieldExtensions,\n      parentSpan,\n    });\n\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer });\n    }\n\n    if (typeComposer.hasInterface(`RemoteFile`)) {\n      addRemoteFileInterfaceFields(schemaComposer, typeComposer);\n    }\n\n    await determineSearchableFields({\n      schemaComposer,\n      typeComposer,\n      // parentSpan,\n    });\n\n    if (typeComposer.hasInterface(`Node`)) {\n      await addTypeToRootQuery({\n        schemaComposer,\n        typeComposer,\n        // parentSpan\n      });\n    }\n  } else if (typeComposer instanceof InterfaceTypeComposer) {\n    if (isNodeInterface(typeComposer)) {\n      await addNodeInterfaceFields({\n        // @ts-ignore\n        schemaComposer,\n        // @ts-ignore\n        typeComposer,\n        // parentSpan\n      });\n\n      // We only process field extensions for queryable Node interfaces, so we get\n      // the input args on the root query type, e.g. `formatString` etc. for `dateformat`\n      await processFieldExtensions({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan,\n      });\n      await determineSearchableFields({\n        schemaComposer,\n        typeComposer,\n        // parentSpan,\n      });\n      await addTypeToRootQuery({\n        schemaComposer,\n        typeComposer,\n        // parentSpan\n      });\n    }\n  }\n};\n\nconst fieldNames = {\n  query: (typeName) => camelCase(typeName),\n  queryAll: (typeName) => camelCase(`all ${typeName}`),\n  convenienceChild: (typeName) => camelCase(`child ${typeName}`),\n  convenienceChildren: (typeName) => camelCase(`children ${typeName}`),\n};\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      typeOrTypeDef = parseTypeDef(typeOrTypeDef);\n    }\n\n    if (isASTDocument(typeOrTypeDef)) {\n      let parsedTypes;\n      const createdFrom = `sdl`;\n      try {\n        parsedTypes = parseTypes({\n          doc: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          schemaComposer,\n          parentSpan,\n        });\n      } catch (error) {\n        reportParsingError(error);\n        return;\n      }\n      parsedTypes.forEach((type) => {\n        processAddedType({\n          schemaComposer,\n          type,\n          // parentSpan,\n          createdFrom,\n          plugin,\n        });\n      });\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        // parentSpan,\n      });\n\n      if (type) {\n        const typeName = type.getTypeName();\n        const createdFrom = `typeBuilder`;\n        checkIsAllowedTypeName(typeName);\n        if (schemaComposer.has(typeName)) {\n          const typeComposer = schemaComposer.get(typeName);\n          mergeTypes({\n            schemaComposer,\n            typeComposer,\n            type,\n            plugin,\n            createdFrom,\n            // parentSpan,\n          });\n        } else {\n          processAddedType({\n            schemaComposer,\n            type,\n            // parentSpan,\n            createdFrom,\n            plugin,\n          });\n        }\n      }\n    } else {\n      const typeName = typeOrTypeDef.name;\n      const createdFrom = `graphql-js`;\n      checkIsAllowedTypeName(typeName);\n      if (schemaComposer.has(typeName)) {\n        const typeComposer = schemaComposer.get(typeName);\n        mergeTypes({\n          schemaComposer,\n          typeComposer,\n          type: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          // parentSpan,\n        });\n      } else {\n        processAddedType({\n          schemaComposer,\n          type: typeOrTypeDef,\n          // parentSpan,\n          createdFrom,\n          plugin,\n        });\n      }\n    }\n  });\n};\n\nconst mergeTypes = ({\n  schemaComposer,\n  typeComposer,\n  type,\n  plugin,\n  createdFrom,\n  // parentSpan,\n}) => {\n  // The merge is considered safe when a user or a plugin owning the type extend this type\n  // TODO: add proper conflicts detection and reporting (on the field level)\n  const typeOwner = typeComposer.getExtension(`plugin`);\n\n  const isSafeMerge =\n    !plugin ||\n    plugin.name === `default-site-plugin` ||\n    plugin.name === typeOwner;\n\n  if (!isSafeMerge) {\n    if (typeOwner) {\n      report.warn(\n        `Plugin \\`${plugin.name}\\` has customized the GraphQL type ` +\n          `\\`${typeComposer.getTypeName()}\\`, which has already been defined ` +\n          `by the plugin \\`${typeOwner}\\`. ` +\n          `This could potentially cause conflicts.`,\n      );\n    } else {\n      report.warn(\n        `Plugin \\`${plugin.name}\\` has customized the built-in Gatsby GraphQL type ` +\n          `\\`${typeComposer.getTypeName()}\\`. ` +\n          `This is allowed, but could potentially cause conflicts.`,\n      );\n    }\n  }\n\n  if (\n    type instanceof ObjectTypeComposer ||\n    type instanceof InterfaceTypeComposer ||\n    type instanceof GraphQLObjectType ||\n    type instanceof GraphQLInterfaceType\n  ) {\n    mergeFields({ typeComposer, fields: type.getFields() });\n    type.getInterfaces().forEach((iface) => typeComposer.addInterface(iface));\n  }\n\n  if (\n    type instanceof GraphQLInterfaceType ||\n    type instanceof InterfaceTypeComposer ||\n    type instanceof GraphQLUnionType ||\n    type instanceof UnionTypeComposer\n  ) {\n    mergeResolveType({ typeComposer, type });\n  }\n\n  let extensions = {};\n  if (isNamedTypeComposer(type)) {\n    if (createdFrom === `sdl`) {\n      extensions = convertDirectivesToExtensions(type, type.getDirectives());\n    } else {\n      typeComposer.extendExtensions(type.getExtensions());\n    }\n  }\n\n  addExtensions({\n    schemaComposer,\n    typeComposer,\n    extensions,\n    plugin,\n    createdFrom,\n  });\n\n  return true;\n};\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  // parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.add(type);\n  const typeComposer = schemaComposer.get(typeName);\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType((node) => {\n        return node?.internal?.type || node?.__typename;\n      });\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer);\n  let extensions = {};\n  if (createdFrom === `sdl`) {\n    extensions = convertDirectivesToExtensions(\n      typeComposer,\n      typeComposer.getDirectives(),\n    );\n  }\n\n  addExtensions({\n    schemaComposer,\n    typeComposer,\n    extensions,\n    plugin,\n    createdFrom,\n  });\n\n  return typeComposer;\n};\n\n/**\n * @param {import(\"graphql-compose\").AnyTypeComposer} typeComposer\n * @param {Array<import(\"graphql-compose\").Directive>} directives\n * @return {{infer?: boolean, mimeTypes?: { types: Array<string> }, childOf?: { types: Array<string> }, nodeInterface?: boolean}}\n */\nconst convertDirectivesToExtensions = (typeComposer, directives) => {\n  const extensions = {};\n  directives.forEach(({ name, args }) => {\n    switch (name) {\n      case `infer`:\n      case `dontInfer`: {\n        extensions[`infer`] = name === `infer`;\n        break;\n      }\n      case `mimeTypes`:\n        extensions[`mimeTypes`] = args;\n        break;\n      case `childOf`:\n        extensions[`childOf`] = args;\n        break;\n      case `nodeInterface`:\n        if (typeComposer instanceof InterfaceTypeComposer) {\n          extensions[`nodeInterface`] = true;\n        }\n        break;\n      case `authorization`:\n        extensions[`authorization`] = args;\n        break;\n      default:\n    }\n  });\n\n  return extensions;\n};\n\nconst addExtensions = ({\n  schemaComposer,\n  typeComposer,\n  extensions = {},\n  plugin,\n  createdFrom,\n}) => {\n  typeComposer.setExtension(`createdFrom`, createdFrom);\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null);\n  typeComposer.extendExtensions(extensions);\n\n  if (\n    typeComposer instanceof InterfaceTypeComposer &&\n    isNodeInterface(typeComposer)\n  ) {\n    const hasCorrectIdField =\n      typeComposer.hasField(`id`) &&\n      typeComposer.getFieldType(`id`).toString() === `ID!`;\n\n    if (!hasCorrectIdField) {\n      report.panic(\n        `Interfaces with the \\`nodeInterface\\` extension must have a field ` +\n          `\\`id\\` of type \\`ID!\\`. Check the type definition of ` +\n          `\\`${typeComposer.getTypeName()}\\`.`,\n      );\n    }\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof InputTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach((fieldName) => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom);\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null,\n      );\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName);\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args);\n        });\n      }\n\n      // Validate field extension args. `graphql-compose` already checks the\n      // type of directive args in `parseDirectives`, but we want to check\n      // extensions provided with type builders as well. Also, we warn if an\n      // extension option was provided which does not exist in the field\n      // extension definition.\n      const fieldExtensions = typeComposer.getFieldExtensions(fieldName);\n      const typeName = typeComposer.getTypeName();\n      Object.keys(fieldExtensions)\n        .filter((name) => !internalExtensionNames.includes(name))\n        .forEach((name) => {\n          const args = fieldExtensions[name];\n\n          if (!args || typeof args !== `object`) {\n            report.error(\n              `Field extension arguments must be provided as an object. ` +\n                `Received \"${args}\" on \\`${typeName}.${fieldName}\\`.`,\n            );\n            return;\n          }\n\n          try {\n            const definition = schemaComposer.getDirective(name);\n\n            // Handle `defaultValue` when not provided as directive\n            definition.args.forEach(({ name, defaultValue }) => {\n              if (args[name] === undefined && defaultValue !== undefined) {\n                args[name] = defaultValue;\n              }\n            });\n\n            Object.keys(args).forEach((arg) => {\n              const argumentDef = definition.args.find(\n                ({ name }) => name === arg,\n              );\n              if (!argumentDef) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has invalid argument \\`${arg}\\`.`,\n                );\n                return;\n              }\n              const value = args[arg];\n              try {\n                validate(argumentDef.type, value);\n              } catch (error) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has argument \\`${arg}\\` with invalid value \"${value}\". ` +\n                    error.message,\n                );\n              }\n            });\n          } catch (error) {\n            report.error(\n              `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                `is not available.`,\n            );\n          }\n        });\n    });\n  }\n\n  return typeComposer;\n};\n\nconst checkIsAllowedTypeName = (name) => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`,\n  );\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`,\n  );\n  invariant(\n    !builtInScalarTypeNames.includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`,\n  );\n  assertValidName(name);\n};\n\nconst createTypeComposerFromGatsbyType = ({ schemaComposer, type }) => {\n  let typeComposer;\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      typeComposer = ObjectTypeComposer.createTemp({\n        ...type.config,\n        fields: () =>\n          schemaComposer.typeMapper.convertOutputFieldConfigMap(\n            type.config.fields,\n          ),\n        interfaces: () => {\n          if (type.config.interfaces) {\n            return type.config.interfaces.map((iface) => {\n              if (typeof iface === `string`) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those interfaces actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                if (!schemaComposer.has(iface)) {\n                  const tmpComposer = schemaComposer.createInterfaceTC(iface);\n                  tmpComposer.setExtension(`isPlaceholder`, true);\n                  return tmpComposer;\n                }\n                return schemaComposer.getIFTC(iface);\n              } else {\n                return iface;\n              }\n            });\n          } else {\n            return [];\n          }\n        },\n      });\n      break;\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      typeComposer = InputTypeComposer.createTemp({\n        ...type.config,\n        fields: schemaComposer.typeMapper.convertInputFieldConfigMap(\n          type.config.fields,\n        ),\n      });\n      break;\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      typeComposer = UnionTypeComposer.createTemp({\n        ...type.config,\n        types: () => {\n          if (type.config.types) {\n            return type.config.types.map((typeName) => {\n              if (!schemaComposer.has(typeName)) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those types actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                const tmpComposer = schemaComposer.createObjectTC(typeName);\n                tmpComposer.setExtension(`isPlaceholder`, true);\n                return tmpComposer;\n              }\n              return schemaComposer.getOTC(typeName);\n            });\n          } else {\n            return [];\n          }\n        },\n      });\n      break;\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      typeComposer = InterfaceTypeComposer.createTemp({\n        ...type.config,\n        fields: () =>\n          schemaComposer.typeMapper.convertOutputFieldConfigMap(\n            type.config.fields,\n          ),\n        interfaces: () => {\n          if (type.config.interfaces) {\n            return type.config.interfaces.map((iface) => {\n              if (typeof iface === `string`) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those interfaces actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                if (!schemaComposer.has(iface)) {\n                  const tmpComposer = schemaComposer.createInterfaceTC(iface);\n                  tmpComposer.setExtension(`isPlaceholder`, true);\n                  return tmpComposer;\n                }\n                return schemaComposer.getIFTC(iface);\n              } else {\n                return iface;\n              }\n            });\n          } else {\n            return [];\n          }\n        },\n      });\n      break;\n    }\n    case GatsbyGraphQLTypeKind.ENUM: {\n      typeComposer = EnumTypeComposer.createTemp(type.config);\n      break;\n    }\n    case GatsbyGraphQLTypeKind.SCALAR: {\n      typeComposer = ScalarTypeComposer.createTemp(type.config);\n      break;\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`);\n      typeComposer = null;\n    }\n  }\n  if (typeComposer) {\n    // Workaround for https://github.com/graphql-compose/graphql-compose/issues/311\n    typeComposer.schemaComposer = schemaComposer;\n  }\n  return typeComposer;\n};\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({ schemaComposer, parentSpan }) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async (tc) => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName();\n        const result = await apiRunnerNode(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            get nodes() {\n              // TODO STRICT_MODE: return iterator instead of array\n              return getNodesByType(typeName);\n            },\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan,\n        });\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          // @ts-ignore\n          result.forEach((fields) => tc.addNestedFields(fields));\n        }\n      }\n    }),\n  );\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  // parentSpan,\n}) => {\n  thirdPartySchemas.forEach((schema) => {\n    const schemaQueryType = schema.getQueryType();\n    const queryTC = schemaComposer.createTempTC(schemaQueryType);\n    processThirdPartyTypeFields({\n      typeComposer: queryTC,\n      type: schemaQueryType,\n      schemaQueryType,\n    });\n    schemaComposer.Query.addFields(queryTC.getFields());\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap();\n    Object.keys(types).forEach((typeName) => {\n      const type = types[typeName];\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeHasFields =\n          type instanceof GraphQLObjectType ||\n          type instanceof GraphQLInterfaceType;\n\n        // Workaround for an edge case typical for Relay Classic-compatible schemas.\n        // For example, GitHub API contains this piece:\n        //   type Query { relay: Query }\n        // And gatsby-source-graphql transforms it to:\n        //   type Query { github: GitHub }\n        //   type GitHub { relay: Query }\n        // The problem:\n        //   schemaComposer.createTC(type) for type `GitHub` will eagerly create type composers\n        //   for all fields (including `relay` and it's type: `Query` of the third-party schema)\n        //   This unexpected `Query` composer messes up with our own Query type composer and produces duplicate types.\n        //   The workaround is to make sure fields of the GitHub type are lazy and are evaluated only when\n        //   this Query type is already replaced with our own root `Query` type (see processThirdPartyTypeFields):\n        // @ts-ignore\n        if (typeHasFields && typeof type._fields === `object`) {\n          // @ts-ignore\n          const fields = type._fields;\n          // @ts-ignore\n          type._fields = () => fields;\n        }\n        // ^^^ workaround done\n        const typeComposer = schemaComposer.createTC(type);\n        if (typeHasFields) {\n          processThirdPartyTypeFields({\n            typeComposer,\n            type,\n            schemaQueryType,\n          });\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`);\n        schemaComposer.addSchemaMustHaveType(typeComposer);\n      }\n    });\n  });\n};\n\nconst resetOverriddenThirdPartyTypeFields = ({ typeComposer }) => {\n  // The problem: createResolvers API mutates third party schema instance.\n  //   For example it can add a new field referencing a type from our main schema\n  //   Then if we rebuild the schema this old type instance will sneak into\n  //   the new schema and produce the famous error:\n  //   \"Schema must contain uniquely named types but contains multiple types named X\"\n  // This function only affects schema rebuilding pathway.\n  //   It cleans up artifacts created by the `createResolvers` API of the previous build\n  //   so that we return the third party schema to its initial state (hence can safely re-add)\n  // TODO: the right way to fix this would be not to mutate the third party schema in\n  //   the first place. But unfortunately mutation happens in the `graphql-compose`\n  //   and we don't have an easy way to avoid it without major rework\n  typeComposer.getFieldNames().forEach((fieldName) => {\n    const createdFrom = typeComposer.getFieldExtension(\n      fieldName,\n      `createdFrom`,\n    );\n    if (createdFrom === `createResolvers`) {\n      typeComposer.removeField(fieldName);\n      return;\n    }\n    const config = typeComposer.getFieldExtension(\n      fieldName,\n      `originalFieldConfig`,\n    );\n    if (config) {\n      typeComposer.removeField(fieldName);\n      typeComposer.addFields({\n        [fieldName]: config,\n      });\n    }\n  });\n};\n\nconst processThirdPartyTypeFields = ({\n  typeComposer,\n  type,\n  schemaQueryType,\n}) => {\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  const fields = type.getFields();\n  Object.keys(fields).forEach((fieldName) => {\n    // Remove customization that we could have added via `createResolvers`\n    // to make it work with schema rebuilding\n    const fieldType = String(fields[fieldName].type);\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      });\n    }\n  });\n  resetOverriddenThirdPartyTypeFields({ typeComposer });\n};\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema();\n  const createResolvers = (\n    resolvers,\n    { ignoreNonexistentTypes = false } = {},\n  ) => {\n    Object.keys(resolvers).forEach((typeName) => {\n      const fields = resolvers[typeName];\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName);\n        Object.keys(fields).forEach((fieldName) => {\n          const fieldConfig = fields[fieldName];\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName);\n            const originalTypeName = originalFieldConfig.type.toString();\n            const originalResolver = originalFieldConfig.resolve;\n            let fieldTypeName;\n            if (fieldConfig.type) {\n              fieldTypeName = Array.isArray(fieldConfig.type)\n                ? stringifyArray(fieldConfig.type)\n                : fieldConfig.type.toString();\n            }\n\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {};\n              if (fieldConfig.type) {\n                // @ts-ignore\n                newConfig.type = fieldConfig.type;\n              }\n              if (fieldConfig.args) {\n                // @ts-ignore\n                newConfig.args = fieldConfig.args;\n              }\n              if (fieldConfig.resolve) {\n                // @ts-ignore\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver:\n                      originalResolver || context.defaultFieldResolver,\n                  });\n                tc.extendFieldExtensions(fieldName, {\n                  needsResolve: true,\n                });\n              }\n              tc.extendField(fieldName, newConfig);\n\n              // See resetOverriddenThirdPartyTypeFields for explanation\n              if (tc.getExtension(`createdFrom`) === `thirdPartySchema`) {\n                tc.setFieldExtension(\n                  fieldName,\n                  `originalFieldConfig`,\n                  originalFieldConfig,\n                );\n              }\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`,\n              );\n            }\n          } else {\n            tc.addFields({\n              [fieldName]: fieldConfig,\n            });\n            // See resetOverriddenThirdPartyTypeFields for explanation\n            tc.setFieldExtension(fieldName, `createdFrom`, `createResolvers`);\n          }\n        });\n      } else if (!ignoreNonexistentTypes) {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`,\n        );\n      }\n    });\n  };\n  await apiRunnerNode(`createResolvers`, {\n    intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan,\n  });\n};\n\nfunction attachTracingResolver({ schemaComposer }) {\n  schemaComposer.forEach((typeComposer) => {\n    if (\n      typeComposer instanceof ObjectTypeComposer ||\n      typeComposer instanceof InterfaceTypeComposer\n    ) {\n      typeComposer.getFieldNames().forEach((fieldName) => {\n        const field = typeComposer.getField(fieldName);\n        const resolver = wrappingResolver(field.resolve || defaultResolver);\n        typeComposer.extendField(fieldName, {\n          resolve: resolver,\n        });\n      });\n    }\n  });\n}\n\nconst determineSearchableFields = ({\n  schemaComposer: _schemaComposer,\n  typeComposer,\n}) => {\n  typeComposer.getFieldNames().forEach((fieldName) => {\n    const field = typeComposer.getField(fieldName);\n    const extensions = typeComposer.getFieldExtensions(fieldName);\n    if (field.resolve) {\n      if (extensions.dateformat) {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: extensions.proxy ? true : false,\n        });\n      } else if (!isEmpty(field.args)) {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.DEPRECATED_SEARCHABLE,\n          sortable: SORTABLE_ENUM.DEPRECATED_SORTABLE,\n          needsResolve: true,\n        });\n      } else {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: true,\n        });\n      }\n    } else {\n      typeComposer.extendFieldExtensions(fieldName, {\n        searchable: SEARCHABLE_ENUM.SEARCHABLE,\n        sortable: SORTABLE_ENUM.SORTABLE,\n        needsResolve: false,\n      });\n    }\n  });\n};\n\nconst addConvenienceChildrenFields = ({ schemaComposer }) => {\n  const parentTypesToChildren = new Map();\n  const mimeTypesToChildren = new Map();\n  const typesHandlingMimeTypes = new Map();\n\n  schemaComposer.forEach((type) => {\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`mimeTypes`)\n    ) {\n      // @ts-ignore\n      const { types } = type.getExtension(`mimeTypes`);\n      new Set(types).forEach((mimeType) => {\n        if (!typesHandlingMimeTypes.has(mimeType)) {\n          typesHandlingMimeTypes.set(mimeType, new Set());\n        }\n        typesHandlingMimeTypes.get(mimeType).add(type);\n      });\n    }\n\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`childOf`)\n    ) {\n      if (type instanceof ObjectTypeComposer && !type.hasInterface(`Node`)) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on types that implement the \\`Node\\` interface.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`,\n        );\n        return;\n      }\n      if (type instanceof InterfaceTypeComposer && !isNodeInterface(type)) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on types that implement the \\`Node\\` interface.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`,\n        );\n        return;\n      }\n\n      // @ts-ignore\n      const { types, mimeTypes } = type.getExtension(`childOf`);\n\n      new Set(types).forEach((parentType) => {\n        if (!parentTypesToChildren.has(parentType)) {\n          parentTypesToChildren.set(parentType, new Set());\n        }\n        parentTypesToChildren.get(parentType).add(type);\n      });\n      new Set(mimeTypes).forEach((mimeType) => {\n        if (!mimeTypesToChildren.has(mimeType)) {\n          mimeTypesToChildren.set(mimeType, new Set());\n        }\n        mimeTypesToChildren.get(mimeType).add(type);\n      });\n    }\n  });\n\n  parentTypesToChildren.forEach((children, parent) => {\n    if (!schemaComposer.has(parent)) return;\n    const typeComposer = schemaComposer.getAnyTC(parent);\n    if (\n      typeComposer instanceof InterfaceTypeComposer &&\n      !isNodeInterface(typeComposer)\n    ) {\n      report.error(\n        `With the \\`childOf\\` extension, children fields can only be added to ` +\n          `interfaces which implement the \\`Node\\` interface.\\n` +\n          `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`,\n      );\n      return;\n    }\n    children.forEach((child) => {\n      typeComposer.addFields(createChildrenField(child.getTypeName()));\n      typeComposer.addFields(createChildField(child.getTypeName()));\n    });\n  });\n\n  mimeTypesToChildren.forEach((children, mimeType) => {\n    const parentTypes = typesHandlingMimeTypes.get(mimeType);\n    if (parentTypes) {\n      parentTypes.forEach((typeComposer) => {\n        if (\n          typeComposer instanceof InterfaceTypeComposer &&\n          !isNodeInterface(typeComposer)\n        ) {\n          report.error(\n            `With the \\`childOf\\` extension, children fields can only be added to ` +\n              `interfaces which implement the \\`Node\\` interface.\\n` +\n              `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`,\n          );\n          return;\n        }\n        children.forEach((child) => {\n          typeComposer.addFields(createChildrenField(child.getTypeName()));\n          typeComposer.addFields(createChildField(child.getTypeName()));\n        });\n      });\n    }\n  });\n};\n\nconst isExplicitChild = ({ typeComposer, childTypeComposer }) => {\n  if (!childTypeComposer.hasExtension(`childOf`)) {\n    return false;\n  }\n  const childOfExtension = childTypeComposer.getExtension(`childOf`);\n  const { types: parentMimeTypes = [] } =\n    typeComposer.getExtension(`mimeTypes`) ?? {};\n\n  return (\n    childOfExtension?.types?.includes(typeComposer.getTypeName()) ||\n    childOfExtension?.mimeTypes?.some((mimeType) =>\n      parentMimeTypes.includes(mimeType),\n    )\n  );\n};\n\nconst addInferredChildOfExtensions = ({ schemaComposer }) => {\n  schemaComposer.forEach((typeComposer) => {\n    if (\n      typeComposer instanceof ObjectTypeComposer &&\n      typeComposer.hasInterface(`Node`)\n    ) {\n      addInferredChildOfExtension({\n        schemaComposer,\n        typeComposer,\n      });\n    }\n  });\n};\n\nconst addInferredChildOfExtension = ({ schemaComposer, typeComposer }) => {\n  const shouldInfer = typeComposer.getExtension(`infer`);\n  // With `@dontInfer`, only parent-child\n  // relations explicitly set with the `@childOf` extension are added.\n  if (shouldInfer === false) return;\n\n  const parentTypeName = typeComposer.getTypeName();\n\n  // This is expensive.\n  // TODO: We should probably collect this info during inference metadata pass\n  const childNodeTypes = new Set();\n  for (const node of getDataStore().iterateNodesByType(parentTypeName)) {\n    const children = (node.children || []).map(getNode);\n    for (const childNode of children) {\n      if (childNode?.internal?.type) {\n        childNodeTypes.add(childNode.internal.type);\n      }\n    }\n  }\n\n  childNodeTypes.forEach((typeName) => {\n    const childTypeComposer = schemaComposer.getAnyTC(typeName);\n    let childOfExtension = childTypeComposer.getExtension(`childOf`);\n\n    if (isExplicitChild({ typeComposer, childTypeComposer })) {\n      return;\n    }\n    // Set `@childOf` extension automatically\n    // This will cause convenience children fields like `childImageSharp`\n    // to be added in `addConvenienceChildrenFields` method.\n    // Also required for proper printing of the `@childOf` directive in the snapshot plugin\n    if (!childOfExtension) {\n      childOfExtension = {};\n    }\n    if (!childOfExtension.types) {\n      childOfExtension.types = [];\n    }\n    childOfExtension.types.push(parentTypeName);\n    childTypeComposer.setExtension(`childOf`, childOfExtension);\n  });\n};\n\nconst createChildrenField = (typeName) => {\n  return {\n    [fieldNames.convenienceChildren(typeName)]: {\n      type: () => [typeName],\n      description: `Returns all children nodes filtered by type ${typeName}`,\n      resolve(source, _args, context) {\n        const { path } = context;\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path },\n        );\n      },\n    },\n  };\n};\n\nconst createChildField = (typeName) => {\n  return {\n    [fieldNames.convenienceChild(typeName)]: {\n      type: () => typeName,\n      description:\n        `Returns the first child node of type ${typeName} ` +\n        `or null if there are no children of given type on this node`,\n      resolve(source, _args, context) {\n        const { path } = context;\n        const result = context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path },\n        );\n        if (result && result.length > 0) {\n          return result[0];\n        } else {\n          return null;\n        }\n      },\n    },\n  };\n};\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  });\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  });\n\n  const typeName = typeComposer.getTypeName();\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = fieldNames.query(typeName);\n  const queryNamePlural = fieldNames.queryAll(typeName);\n\n  schemaComposer.Query.addFields({\n    [queryName]: {\n      type: typeComposer,\n      args: {\n        ...filterInputTC.getFields(),\n      },\n      resolve: findOne(typeName),\n    },\n    [queryNamePlural]: {\n      type: paginationTC,\n      args: {\n        filter: filterInputTC,\n        sort: getSortInputNestedObjects({ schemaComposer, typeComposer }),\n\n        skip: `Int`,\n        limit: `Int`,\n      },\n      resolve: findManyPaginated(typeName),\n    },\n  }).makeFieldNonNull(queryNamePlural);\n};\n\nconst parseTypes = ({\n  doc,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const types = [];\n  doc.definitions.forEach((def) => {\n    const name = def.name.value;\n    checkIsAllowedTypeName(name);\n\n    if (schemaComposer.has(name)) {\n      // We don't check if ast.kind matches composer type, but rely\n      // that this will throw when something is wrong and get\n      // reported by `reportParsingError`.\n\n      // Keep the original type composer around\n      const typeComposer = schemaComposer.get(name);\n\n      // After this, the parsed type composer will be registered as the composer\n      // handling the type name (requires cleanup after merging, see below)\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def);\n\n      // Merging types require implemented interfaces to already exist.\n      // Depending on type creation order, interface might have not been\n      // processed yet. We check if interface already exist and create\n      // placeholder for it, if it doesn't exist yet.\n      if (parsedType.getInterfaces) {\n        parsedType.getInterfaces().forEach((iface) => {\n          const ifaceName = iface.getTypeName();\n          if (!schemaComposer.has(ifaceName)) {\n            const tmpComposer = schemaComposer.createInterfaceTC(ifaceName);\n            tmpComposer.setExtension(`isPlaceholder`, true);\n          }\n        });\n      }\n\n      // Merge the parsed type with the original\n      mergeTypes({\n        schemaComposer,\n        typeComposer,\n        type: parsedType,\n        plugin,\n        createdFrom,\n        // @ts-ignore\n        parentSpan,\n      });\n\n      // Cleanup:\n      // Set the original type composer (with the merged fields added)\n      // as the correct composer for the type name and remove the temporary one\n      // `graphql-compose` doesn't make that easy 🤯\n      // TODO: clean this up when this issue is fixed:\n      //  https://github.com/graphql-compose/graphql-compose/issues/311\n      schemaComposer.set(typeComposer.getTypeName(), typeComposer);\n      schemaComposer.set(typeComposer._gqType, typeComposer);\n      schemaComposer.delete(parsedType._gqType);\n      schemaComposer.delete(parsedType);\n    } else {\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def);\n      // @ts-ignore\n      types.push(parsedType);\n    }\n  });\n  return types;\n};\n\nconst stringifyArray = (arr) =>\n  `[${arr.map((item) =>\n    Array.isArray(item) ? stringifyArray(item) : item.toString(),\n  )}]`;\n\n// TODO: Import this directly from graphql-compose once we update to v7\nconst isNamedTypeComposer = (type) =>\n  type instanceof ObjectTypeComposer ||\n  type instanceof InputTypeComposer ||\n  type instanceof ScalarTypeComposer ||\n  type instanceof EnumTypeComposer ||\n  type instanceof InterfaceTypeComposer ||\n  type instanceof UnionTypeComposer;\n\nconst validate = (type, value) => {\n  if (type instanceof GraphQLNonNull) {\n    if (value == null) {\n      throw new Error(`Expected non-null field value.`);\n    }\n    return validate(type.ofType, value);\n  } else if (type instanceof GraphQLList) {\n    if (!Array.isArray(value)) {\n      throw new Error(`Expected array field value.`);\n    }\n    return value.map((v) => validate(type.ofType, v));\n  } else {\n    return type.parseValue(value);\n  }\n};\n\nconst isNodeInterface = (interfaceTypeComposer) =>\n  interfaceTypeComposer.hasInterface(`Node`);\n\nconst checkQueryableInterfaces = ({ schemaComposer }) => {\n  const queryableInterfaces = new Set();\n  schemaComposer.forEach((type) => {\n    if (type instanceof InterfaceTypeComposer && isNodeInterface(type)) {\n      queryableInterfaces.add(type.getTypeName());\n    }\n  });\n  const incorrectTypes = new Set();\n  schemaComposer.forEach((type) => {\n    if (type instanceof ObjectTypeComposer) {\n      const interfaces = type.getInterfaces();\n      if (\n        interfaces.some((iface) =>\n          queryableInterfaces.has(iface.getTypeName()),\n        ) &&\n        !type.hasInterface(`Node`)\n      ) {\n        incorrectTypes.add(type.getTypeName());\n      }\n    }\n  });\n  if (incorrectTypes.size) {\n    report.panic(\n      `Types implementing queryable interfaces must also implement the \\`Node\\` ` +\n        `interface. Check the type definition of ` +\n        `${Array.from(incorrectTypes)\n          .map((t) => `\\`${t}\\``)\n          .join(`, `)}.`,\n    );\n  }\n};\n\nconst mergeFields = ({ typeComposer, fields }) =>\n  Object.entries(fields).forEach(([fieldName, fieldConfig]) => {\n    if (typeComposer.hasField(fieldName)) {\n      typeComposer.extendField(fieldName, fieldConfig);\n    } else {\n      typeComposer.setField(fieldName, fieldConfig);\n    }\n  });\n\nconst mergeResolveType = ({ typeComposer, type }) => {\n  if (\n    (type instanceof GraphQLInterfaceType ||\n      type instanceof GraphQLUnionType) &&\n    type.resolveType\n  ) {\n    typeComposer.setResolveType(type.resolveType);\n  }\n  if (\n    (type instanceof InterfaceTypeComposer ||\n      type instanceof UnionTypeComposer) &&\n    type.getResolveType()\n  ) {\n    typeComposer.setResolveType(type.getResolveType());\n  }\n  if (!typeComposer.getResolveType()) {\n    typeComposer.setResolveType((node) => node?.internal?.type);\n  }\n};\n"],"mappings":"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"}