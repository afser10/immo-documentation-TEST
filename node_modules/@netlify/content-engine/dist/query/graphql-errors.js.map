{"version":3,"file":"graphql-errors.js","names":["_graphql","require","_codeFrame","_lodash","_interopRequireDefault","_reporter","_graphqlErrorsCodeframe","_upperFirst","fs","distance","levenshtein","locInGraphQlToLocInFile","handlers","name","node","kind","value","loc","formatFilePath","filePath","report","format","bold","blue","formatError","message","codeFrame","stripIndent","extractError","error","docRegex","matches","docName","codeBlock","exec","toString","index","lastIndex","trim","findLocation","extractedMessage","def","location","visit","enter","regex","handler","match","slice","getCodeFrameFromRelayError","_error","start","source","query","body","print","line","column","getLocation","getCodeFrame","multipleRootQueriesError","otherDef","otherName","field","selectionSet","selections","otherField","unifiedName","camelCase","upperFirst","highlightCode","process","env","NODE_ENV","id","context","beforeCodeFrame","codeFrameColumns","linesBelow","Number","MAX_SAFE_INTEGER","afterCodeFrame","graphqlError","definitionsByName","get","formattedMessage","reportedMessage","unknownFragmentError","fragmentNames","definition","_fragmentNames$map$fi","closestFragment","map","f","fragment","score","filter","sort","a","b","text","readFileSync","encoding","fragmentName","templateLoc","end","linesAbove","duplicateFragmentError","leftDefinition","rightDefinition","leftFragment","rightFragment"],"sources":["../../src/query/graphql-errors.ts"],"sourcesContent":["// @flow\n\nconst fs = require(`fs-extra`);\nimport {\n  print,\n  visit,\n  getLocation,\n  type ASTNode,\n  type Location,\n  type Source,\n} from \"graphql\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nconst { distance: levenshtein } = require(`fastest-levenshtein`);\nimport camelCase from \"lodash.camelcase\";\nimport report from \"../reporter\";\nconst { locInGraphQlToLocInFile } = require(`./error-parser`);\nimport { getCodeFrame } from \"./graphql-errors-codeframe\";\nimport { upperFirst } from \"../core-utils/upper-first\";\n\ntype RelayGraphQLError = Error & { validationErrors?: Object };\n\n// These handle specific errors throw by RelayParser. If an error matches\n// you get a pointer to the location in the query that is broken, otherwise\n// we show the error and the query.\nconst handlers: [\n  RegExp,\n  (match: string[], node: ASTNode) => Location | null | undefined,\n][] = [\n  [\n    /Unknown field `(.+)` on type `(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Field` && node.name.value === name) {\n        return node.name.loc;\n      }\n      return null;\n    },\n  ],\n  [\n    /Unknown argument `(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Argument` && node.name.value === name) {\n        return node.name.loc;\n      }\n      return null;\n    },\n  ],\n  [\n    /Unknown directive `@(.+)`/i,\n    ([name], node) => {\n      if (node.kind === `Directive` && node.name.value === name) {\n        return node.name.loc;\n      }\n      return null;\n    },\n  ],\n];\n\nfunction formatFilePath(filePath: string) {\n  return `${report.format.bold(`file:`)} ${report.format.blue(filePath)}`;\n}\n\nfunction formatError(message: string, filePath: string, codeFrame: string) {\n  return (\n    report.stripIndent`\n    ${message}\n\n      ${formatFilePath(filePath)}\n  ` + `\\n\\n${codeFrame}\\n`\n  );\n}\n\nfunction extractError(error: Error): {\n  message: string;\n  codeBlock: string;\n  docName: string;\n} {\n  const docRegex =\n    /Error:.(RelayParser|GraphQLParser):(.*)Source: document.`(.*)`.file.*(GraphQL.request.*^\\s*$)/gms;\n  let matches: RegExpExecArray | null;\n  let message = ``;\n  let docName = ``;\n  let codeBlock = ``;\n  while ((matches = docRegex.exec(error.toString())) !== null) {\n    // This is necessary to avoid infinite loops with zero-width matches\n    if (matches.index === docRegex.lastIndex) docRegex.lastIndex++;\n    [, , message, docName, codeBlock] = matches;\n  }\n\n  if (!message) {\n    message = error.toString();\n  }\n\n  message = message.trim();\n\n  return { message, codeBlock, docName };\n}\n\nfunction findLocation(extractedMessage: string, def: any): Location | null {\n  let location: Location | null | undefined = null;\n  visit(def, {\n    enter(node) {\n      if (location) return;\n      for (const [regex, handler] of handlers) {\n        const match = extractedMessage.match(regex);\n        if (!match) continue;\n        if ((location = handler(match.slice(1), node))) break;\n      }\n    },\n  });\n  return location;\n}\n\nfunction getCodeFrameFromRelayError(\n  def: any,\n  extractedMessage: string,\n  _error: Error,\n) {\n  const { start, source } = findLocation(extractedMessage, def) || {};\n  const query = source ? source.body : print(def);\n\n  // we can't reliably get a location without the location source, since\n  // the printed query may differ from the original.\n  const { line, column } = (source && getLocation(source, start!)) || {};\n  return getCodeFrame(query, line, column);\n}\n\nexport function multipleRootQueriesError(\n  filePath: string,\n  def: any,\n  otherDef: any,\n) {\n  const name = def.name.value;\n  const otherName = otherDef.name.value;\n  const field = def.selectionSet.selections[0].name.value;\n  const otherField = otherDef.selectionSet.selections[0].name.value;\n  const unifiedName = `${camelCase(name)}And${upperFirst(\n    camelCase(otherName),\n  )}`;\n\n  // colors are problematic for tests as we can different\n  // results depending on platform, so we don't\n  // highlight code for tests\n  const highlightCode = process.env.NODE_ENV !== `test`;\n\n  return {\n    id: `85910`,\n    filePath,\n    context: {\n      name,\n      otherName,\n      beforeCodeFrame: codeFrameColumns(\n        report.stripIndent`\n        query ${otherName} {\n          ${field} {\n            #...\n          }\n        }\n\n        query ${name} {\n          ${otherField} {\n            #...\n          }\n        }\n      `,\n        {\n          start: {\n            column: 0,\n            line: 0,\n          },\n        },\n        {\n          linesBelow: Number.MAX_SAFE_INTEGER,\n          highlightCode,\n        },\n      ),\n      afterCodeFrame: codeFrameColumns(\n        report.stripIndent`\n        query ${unifiedName} {\n          ${field} {\n            #...\n          }\n          ${otherField} {\n            #...\n          }\n        }\n      `,\n        {\n          start: {\n            column: 0,\n            line: 0,\n          },\n        },\n        {\n          linesBelow: Number.MAX_SAFE_INTEGER,\n          highlightCode,\n        },\n      ),\n    },\n  };\n}\n\nexport function graphqlError(\n  definitionsByName: Map<string, any>,\n  error: Error | RelayGraphQLError,\n) {\n  let codeBlock;\n  const { message, docName } = extractError(error);\n  const { def, filePath } = definitionsByName.get(docName) || {};\n\n  if (filePath && docName) {\n    codeBlock = getCodeFrameFromRelayError(def, message, error);\n    const formattedMessage = formatError(message, filePath, codeBlock);\n    return { formattedMessage, docName, message, codeBlock };\n  }\n\n  let reportedMessage = `There was an error while compiling your site's GraphQL queries.\n  ${message || error.message}\n    `;\n\n  if (error.message.match(/must be an instance of/)) {\n    reportedMessage +=\n      `This usually means that more than one instance of 'graphql' is installed ` +\n      `in your node_modules. Remove all but the top level one or run \\`npm dedupe\\` to fix it.`;\n  }\n\n  if (error.message.match(/Duplicate document/)) {\n    reportedMessage += `${error.message.slice(21)}\\n`;\n  }\n\n  return { formattedMessage: reportedMessage, docName, message, codeBlock };\n}\n\nexport function unknownFragmentError({\n  fragmentNames,\n  filePath,\n  definition,\n  node,\n}) {\n  const name = node.name.value;\n  const closestFragment = fragmentNames\n    .map((f) => {\n      return { fragment: f, score: levenshtein(name, f) };\n    })\n    .filter((f) => f.score < 10)\n    .sort((a, b) => a.score > b.score)[0]?.fragment;\n\n  let text;\n  try {\n    text = fs.readFileSync(filePath, { encoding: `utf-8` });\n  } catch {\n    text = definition.text;\n  }\n\n  return {\n    id: `85908`,\n    filePath,\n    context: {\n      fragmentName: name,\n      closestFragment,\n      codeFrame: codeFrameColumns(\n        text,\n        {\n          start: locInGraphQlToLocInFile(\n            definition.templateLoc,\n            getLocation({ body: definition.text } as Source, node.loc.start),\n          ),\n          end: locInGraphQlToLocInFile(\n            definition.templateLoc,\n            getLocation({ body: definition.text } as Source, node.loc.end),\n          ),\n        },\n        {\n          linesAbove: 10,\n          linesBelow: 10,\n        },\n      ),\n    },\n  };\n}\n\nexport function duplicateFragmentError({\n  name,\n  leftDefinition,\n  rightDefinition,\n}) {\n  return {\n    id: `85919`,\n    context: {\n      fragmentName: name,\n      leftFragment: {\n        filePath: leftDefinition.filePath,\n        codeFrame: codeFrameColumns(\n          leftDefinition.text,\n          {\n            start: getLocation(\n              { body: leftDefinition.text } as Source,\n              leftDefinition.def.name.loc.start,\n            ),\n            end: getLocation(\n              { body: leftDefinition.text } as Source,\n              leftDefinition.def.name.loc.end,\n            ),\n          },\n          {\n            linesAbove: 10,\n            linesBelow: 10,\n          },\n        ),\n      },\n      rightFragment: {\n        filePath: rightDefinition.filePath,\n        codeFrame: codeFrameColumns(\n          rightDefinition.text,\n          {\n            start: getLocation(\n              { body: rightDefinition.text } as Source,\n              rightDefinition.def.name.loc.start,\n            ),\n            end: getLocation(\n              { body: rightDefinition.text } as Source,\n              rightDefinition.def.name.loc.end,\n            ),\n          },\n          {\n            linesAbove: 10,\n            linesBelow: 10,\n          },\n        ),\n      },\n    },\n  };\n}\n"],"mappings":"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"}